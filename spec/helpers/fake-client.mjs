import { v4 } from 'uuid'

/**
 * Class for tests, which emulates AWS Clients (DynamoDBClient in particular)
 */
export default class FakeClient {
  /**
   * Constructor
   */
  constructor () {
    this.resetMocks()
  }

  /**
   * Resets mocks
   */
  resetMocks () {
    this.commandMocks = []
    this.mockedCommands = []
  }

  /**
   * Adds mock
   * @param {*} mock Mock of responsed which will be returned by "send" function
   */
  addMock (mock) {
    if (!this.commandMocks) {
      this.commandMocks = []
    }
    this.commandMocks.push(mock)
  }

  /**
   * Generates Marshalled JSON of item for test purposes
   * @param {string} name Name (data.name)
   * @param {string} ownedResourceType String which contains user ID and resource type
   * @param {string|null} [uuid=null] UUID of item (random UUID v4 will be generated by default)
   * @returns {Object} Marshalled JSON object
   */
  generateTestItem (name, ownedResourceType, uuid = null) {
    return {
      uuid: {
        S: uuid || v4()
      },
      data: {
        M: {
          name: {
            S: name
          }
        }
      },
      owned_resource_type: {
        S: ownedResourceType
      },
      timestamp: {
        N: Date.now()
      }
    }
  }

  /**
   * Returns command which was emulated with mock
   * @returns {Object} Command object
   */
  getMockedCommand () {
    if (this.mockedCommandsCount === 0) {
      throw new Error('No more mocked commands are found')
    }
    return this.mockedCommands.shift()
  }

  /**
   * Number of not retrieved mocked commands
   * @type {number}
   */
  get mockedCommandsCount () {
    return this.mockedCommands.length
  }

  /**
   * Number of unused mocks
   * @type {number}
   */
  get commandMocksCount () {
    return this.commandMocks.length
  }

  /**
   * Emulation of "send" function of AWS Clients
   * @param {*} command Command
   * @returns {*} Mock, prepared for emulation
   */
  async send (command) {
    if (this.commandMocksCount === 0) {
      throw new Error('No more mocks are found')
    }
    const mock = this.commandMocks.shift()
    if (!this.mockedCommands) {
      this.mockedCommands = []
    }
    this.mockedCommands.push(command)
    return mock
  }
}
